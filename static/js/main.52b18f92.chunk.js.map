{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","buttonText","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","placeholder","newText","toUpperCase","showAlert","toLowerCase","trim","split","reverse","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setbuttonText","_useState5","_useState6","setalert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.52b18f92.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n// Topics : react ,props,propstypes,state,onchange,event listner,hook\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode}  type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.buttonText}</label>\r\n         </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n    aboutText:PropTypes.string\r\n}\r\n\r\n\r\nNavbar.defaultProps={\r\n    title:\"set title\"\r\n};","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick  = () =>{\r\n        // console.log(\"Upper Case was clicked\"+text);\r\n      \r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\",\"success\");\r\n    }\r\n    const handleLwrClick  = () =>{\r\n        // console.log(\"Upper Case was clicked\"+text);\r\n      \r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    }\r\n\r\n    const handleTrimClick = () =>{\r\n      let newText=text.trim();\r\n      setText(newText);\r\n      props.showAlert(\"Text has been trimmed!\",\"success\");\r\n    }\r\n    \r\n\r\n    const reverseString=()=>{\r\n      let newText=text.split('').reverse().join('');\r\n      setText(newText);\r\n      props.showAlert(\"Text is reversed!\",\"success\");\r\n    }\r\n\r\n    const clearText  = () =>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared!\",\"success\");\r\n    }\r\n\r\n    const copyText = () =>{\r\n      var text=document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Copied the text!\",\"success\");\r\n    }\r\n\r\n    //text are only written because of onchange\r\n    const handleOnChange  = (event) =>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    const[text,setText]=useState(\"\");\r\n  return (\r\n    <>\r\n      <div className='container' style={{color:props.mode==='dark'?'white':'black'}}>\r\n          <h2>{props.heading}</h2>\r\n          <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" id=\"myBox\" style={{backgroundColor:props.mode==='dark'?'gray':'white' ,color:props.mode==='dark'?'white':'black'}} value= {text} onChange={handleOnChange} rows=\"8\" placeholder=\"Enter your text\"></textarea>\r\n          </div>\r\n          <div className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</div>\r\n          <div className=\"btn btn-primary mx-3\" onClick={handleLwrClick}>Convert to Lowercase</div>\r\n          <div className=\"btn btn-primary mx-2\" onClick={clearText}>Clear Text</div>\r\n          <div className=\"btn btn-primary mx-2\" onClick={handleTrimClick}>Trim Text</div>\r\n          <div className=\"btn btn-primary mx-2\" onClick={reverseString}>Reverse Text</div>\r\n          <div className=\"btn btn-primary mx-2\" onClick={copyText}>Copy Text</div>\r\n      </div>\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>Your text summary</h1>\r\n        <p><strong>{text.split(\" \").length} words and {text.length} characters</strong></p>\r\n        <p><strong>{0.008 * text.split(\" \").length} minutes to read</strong></p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n//rfce to create this snippet\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n\n// import About from './components/About';\n\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes\n// } from \"react-router-dom\";\n\nfunction App() {\n  \n  const [mode, setMode] = useState('light')\n  const [buttonText, setbuttonText] = useState('Enable Dark Mode')\n  const [alert, setalert] = useState(null)\n  // const [buttonTextMode, setbuttonTextMode] = useState('dark')\n\n  const showAlert = (message,type) =>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setalert(null);\n    },1500)\n  }\n\n  const toggleMode = () =>{\n    if (mode==='dark')\n    {\n      setMode('light');\n      setbuttonText('Enable Dark Mode');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title='TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title='TextUtils is amazing mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title='Install TextUtils';\n      // }, 1500);\n      // document.body.style.color='black'\n      // setbuttonTextMode('dark')\n    }\n    else{\n      setMode('dark');\n      setbuttonText('Enable Light Mode');\n      document.body.style.backgroundColor='#1f3138';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      // document.body.style.color='white'\n      // setbuttonTextMode('light')\n      document.title='TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} buttonText={buttonText} /> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} buttonText={buttonText} />\n\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n\n    {/* To use render the web pages we have used the routes  */}\n    {/* <Routes>\n            <Route exact path=\"/about\" element={<About />}> </Route>\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter your text to Analyse below\" mode={mode} />}></Route>\n    </Routes> */}\n{/*  */}\n        \n      <TextForm heading=\"Enter the text to analyze below\" mode={mode}  showAlert={showAlert} />\n      {/* <About/> */}\n    </div>\n    {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}